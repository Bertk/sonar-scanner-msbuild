//-----------------------------------------------------------------------
// <copyright file="RoslynV1SarifFixer.cs" company="SonarSource SA and Microsoft Corporation">
//   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved.
//   Licensed under the MIT License. See License.txt in the project root for license information.
// </copyright>
//-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Diagnostics;

namespace SonarQube.Common
{
    public static class RoslynV1SarifFixer
    {
        /// <summary>
        /// Returns true if the given SARIF came from the VS 2015 RTM Roslyn, which does not provide correct output.
        /// </summary>
        public /* for test */ static bool IsSarifFromRoslynV1(string input)
        {
            // low risk of false positives / false negatives
            return (input.Contains(@"""toolName"": ""Microsoft (R) Visual C# Compiler""")
                && input.Contains(@"""productVersion"": ""1.0.0"""));
        }

        /// <summary>
        /// Returns true if the input is parseable JSON. No checks are made for conformation to the SARIF specification.
        /// </summary>
        public /* for test */ static bool IsValidJson(string input)
        {
            try
            {
                JObject.Parse(input);     
            }
            catch (JsonReaderException) // we expect invalid JSON
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// The low-level implementation of the the fix - applying escaping to backslashes and quotes.
        /// </summary>
        private static string ApplyFixToSarif(string unfixedSarif)
        {
            string[] inputLines = unfixedSarif.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);

            /// Example invalid line:
            /// "shortMessage": "message \test\ ["_"]",
            for (int i = 0; i < inputLines.Length; i++)
            {
                string line = inputLines[i];
                if (line.Contains(@"""uri"": ")
                    || line.Contains(@"""shortMessage"": ")
                    || line.Contains(@"""fullMessage"": ")
                    || line.Contains(@"""title"": "))
                {
                    line = line.Replace(@"\", @"\\");

                    string[] subStrings = line.Split('"');
                    if (subStrings.Length > 5) // expect 5+ substrings because there are 4 syntactically required quotes
                    { // any less than 6 substrings and there aren't any quotes to escape
                        string[] valueStrings = new string[subStrings.Length - 4];
                        Array.Copy(subStrings, 3, valueStrings, 0, subStrings.Length - 4);
                        string newValue = String.Join("\\\"", valueStrings); // join value string together with escaped quotes

                        string[] newLineStrings = new string[5]
                        {
                                subStrings[0],
                                subStrings[1],
                                subStrings[2],
                                newValue,
                                subStrings[subStrings.Length - 1]
                        }; // construct final line
                        line = String.Join(@"""", newLineStrings); // apply unescaped quotes only where syntactically necessary
                    }

                    inputLines[i] = line;
                }
            }

            return string.Join(Environment.NewLine, inputLines);
        }

        /// <summary>
        /// Used to correct invalid SARIF generated by VS 2015 RTM Roslyn. 
        /// Correctly escapes backslashes and quotes.
        /// 
        /// Returns true if the output is valid SARIF (even if there was no change).
        /// </summary>
        public static bool FixRoslynV1Sarif(string unfixedSarif, out string output)
        {
            if (IsValidJson(unfixedSarif))
            {
                // valid input does not need fixing
                output = unfixedSarif; 
                return true;
            } else
            {
                if (!IsSarifFromRoslynV1(unfixedSarif))
                {
                    // invalid SARIF that has not originated from VS 2015 RTM cannot be fixed
                    output = unfixedSarif;
                    return false;
                }
                else
                {
                    string changedSarif = ApplyFixToSarif(unfixedSarif);

                    if (IsValidJson(changedSarif))
                    {
                        output = changedSarif;
                        return true; // after the fix, output should be valid
                    } else
                    {
                        output = unfixedSarif; // but if it is still invalid, revert changes
                        return false; 
                    }
                }
            }            
        }
    }
}
